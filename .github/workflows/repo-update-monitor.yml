name: 检查仓库更新

# 触发条件
on:
  #  schedule:
  #    - cron: '0 0 * * *'  # 每天 UTC 0:00 运行（北京时间 8:00）
  workflow_dispatch:      # 支持手动触发

# 工作流任务
jobs:
  check-updates:
    name: '检查仓库更新'
    runs-on: ubuntu-latest
    steps:

      # 步骤1: 调试环境变量，确认变量是否正确设置
      # - name: 调试环境变量
      #   run: |
      #     echo "${{ vars.REPOS }}"
      #     echo

      #     # 检查格式并输出错误
      #     has_error=false
      #     while IFS= read -r repo || [[ -n "$repo" ]]; do
      #       clean_repo=$(echo "$repo" | tr -cd '[:print:]' | sed 's/^ *//;s/ *$//')
      #       [[ -z "$clean_repo" ]] && continue

      #       if [[ ! "$clean_repo" =~ ^[a-zA-Z0-9][-a-zA-Z0-9]*/[a-zA-Z0-9][-a-zA-Z0-9_.]*$ ]]; then
      #         echo "❌ 无效仓库格式: '$clean_repo'"
      #         has_error=true
      #       fi
      #     done < <(echo "${{ vars.REPOS }}" | tr '\n' ' ' | tr -s ' ' | sed 's/^ *//;s/ *$//' | tr ' ' '\n')

      #     if [[ "$has_error" == "true" ]]; then
      #       echo
      #       echo "✅ 正确格式示例: owner/repo owner2/repo2 owner3/repo3"
      #       exit 1
      #     fi

      # 步骤2: 检查仓库更新状态
      - name: 检查仓库更新状态
        id: check-updates
        env:
          REPOS: ${{ vars.REPOS }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          # set -x  # 启用调试模式，显示执行的每个命令
          
          # 调试 token
          # echo "Token 前几个字符: ${GITHUB_TOKEN:0:6}..."
          
          # 将环境变量转换为数组并显示
          read -ra repos <<< "$REPOS"
          echo "解析到的仓库数量: ${#repos[@]}"
          echo "仓库列表:"
          for repo in "${repos[@]}"; do
            echo "- $repo"
          done
          
          # 初始化变量
          updates_status="### 🔍 仓库更新检查报告\n\n"
          updates_status+="### 📅 检查时间: $(date '+%Y-%m-%d %H:%M:%S')\n\n"
          updates_status+="---\n\n"
          has_updates=false
          updated_repos=0
          total_repos=${#repos[@]}
          
          # 创建两个数组分别存储有更新和无更新的仓库信息
          updated_content=""
          not_updated_content=""
          error_content=""
          
          echo "开始处理 ${total_repos} 个仓库..."
          
          # 遍历仓库列表
          for repo in "${repos[@]}"; do
            echo "===================="
            echo "处理仓库: ${repo}"
            echo "===================="
          
            # 添加调试信息
            echo "正在获取仓库信息..."
          
            # 调用GitHub API获取仓库信息
            repo_info=$(curl -s -H "Accept: application/vnd.github.v3+json" \
                       -H "Authorization: token ${GITHUB_TOKEN}" \
                       "https://api.github.com/repos/${repo}" || echo '{"message": "API call failed"}')
          
            # 检查API响应
            if [[ $(echo "$repo_info" | jq -r '.message') == "Not Found" ]]; then
              echo "警告: 仓库 ${repo} 未找到"
              # 为未找到的仓库添加错误信息
              error_content+="##### ❌ 仓库：${repo}\n\n"
              error_content+="📝 **描述**：*仓库不存在*\n\n"
              error_content+="⚠️ **错误**：未找到该仓库，请检查仓库名称是否正确\n\n"
              error_content+="---\n\n"
              continue
            fi
          
            if [[ $(echo "$repo_info" | jq -r '.message') == "API call failed" ]]; then
              echo "警告: 获取仓库信息失败"
              # 为API调用失败的仓库添加错误信息
              error_content+="##### ❌ 仓库：${repo}\n\n"
              error_content+="📝 **描述**：*获取信息失败*\n\n"
              error_content+="⚠️ **错误**：API 调用失败，请稍后重试\n\n"
              error_content+="---\n\n"
              continue
            fi
          
            echo "正在获取最新提交信息..."
            latest_commit=$(curl -s -H "Accept: application/vnd.github.v3+json" \
                          -H "Authorization: token ${GITHUB_TOKEN}" \
                          "https://api.github.com/repos/${repo}/commits?per_page=1" || echo '[{"message": "API call failed"}]')
          
            # 检查是否成功获取提交信息
            if [[ $(echo "$latest_commit" | jq -r '.[0].commit') == "null" ]]; then
              echo "警告: 无法获取 ${repo} 的提交信息，跳过处理"
              continue
            fi
          
            # 解析API返回的JSON数据
            commit_date=$(echo "$latest_commit" | jq -r '.[0].commit.committer.date' || echo '')
            commit_msg=$(echo "$latest_commit" | jq -r '.[0].commit.message' || echo '')
            description=$(echo "$repo_info" | jq -r '.description // "暂无描述"')  
          
            if [[ -z "$commit_date" || -z "$commit_msg" ]]; then
              echo "警告: 解析提交信息失败，跳过处理"
              continue
            fi
          
            echo "解析的数据:"
            echo "- 提交日期: $commit_date"
            echo "- 提交信息: $commit_msg"
            echo "- 仓库描述: $description"
          
            # 计算时间差并格式化显示
            echo "计算时间差..."
            current_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            echo "当前时间: $current_time"
            echo "提交时间: $commit_date"

            # 计算时间差（秒）
            current_timestamp=$(date -d "$current_time" +%s)
            commit_timestamp=$(date -d "$commit_date" +%s)
            time_diff_seconds=$((current_timestamp - commit_timestamp))
          
            # 根据时间差选择合适的显示单位
            if [ $time_diff_seconds -lt 60 ]; then
                # 小于1分钟
                time_status="${time_diff_seconds}秒未更新"
            elif [ $time_diff_seconds -lt 3600 ]; then
                # 小于1小时，显示分钟
                time_diff_mins=$((time_diff_seconds / 60))
                time_status="${time_diff_mins}分钟未更新"
            elif [ $time_diff_seconds -lt 86400 ]; then
                # 小于24小时，显示小时
                time_diff_hours=$((time_diff_seconds / 3600))
                time_status="${time_diff_hours}小时未更新"
            else
                # 大于24小时，显示天数
                time_diff_days=$((time_diff_seconds / 86400))
                time_status="${time_diff_days}天未更新"
            fi
          
            # 计算小时数（兼容原有逻辑）
            time_diff=$((time_diff_seconds / 3600))
            echo "时间差: ${time_diff} 小时"

            # 判断是否有更新（24小时内）并设置状态图标
            if (( time_diff <= 24 )); then
                echo "🎉 ${repo} 发现更新 "
                has_updates=true
                ((updated_repos++)) || true
                status_icon="✅"
            else
                echo "💤 ${repo} 无更新 "
                status_icon="❌"
            fi

            # 构建仓库信息
            repo_info_content="##### ${status_icon} 仓库：${repo}\n\n"
            repo_info_content+="📝 **描述**：${description}\n\n"
            repo_info_content+="⏰ **最后更新**：$(date -d "$commit_date" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "$commit_date")\n\n"
            repo_info_content+="📌 **最新提交**：${commit_msg}\n\n"
            repo_info_content+="⏳ **状态**：${time_status}\n\n"
            repo_info_content+="---\n\n"

            # 根据更新状态添加到对应的内容中
            if (( time_diff <= 24 )); then
                updated_content+="$repo_info_content"
            else
                not_updated_content+="$repo_info_content"
            fi
          
            echo "完成处理仓库: ${repo}"
          done || true  # 防止循环错误导致脚本退出
          
          echo "所有仓库处理完成"
          echo "更新的仓库数: ${updated_repos:-0}"
          
          # 设置通知标题
          if [ "${has_updates:-false}" = true ]; then
            title_status="🎉 发现${updated_repos:-0}个仓库更新！"
          else
            title_status="😴 监控的仓库暂无更新 "
          fi
          
          # 添加统计信息
          stats="### 📊 统计信息\n\n"
          stats+="- 总仓库数：${total_repos}\n"
          stats+="- 有更新：${updated_repos:-0}\n"
          stats+="- 无更新：$((total_repos - ${updated_repos:-0}))\n\n"
          stats+="---\n\n"
          
          # 合并所有内容（有更新的在前面）
          final_status="${stats}${updated_content}${not_updated_content}${error_content}"
          
          # 将结果保存到GitHub Actions输出变量
          {
            echo "has_updates=${has_updates:-false}"
            echo "check_results<<EOF"
            echo -e "$final_status"
            echo "EOF"
            echo "title_status=${title_status}"
          } >> $GITHUB_OUTPUT

      # 步骤2: 发送通知
      - name: 发送通知
        # if: github.event_name == 'workflow_dispatch' || steps.check-updates.outputs.has_updates == 'true'  # 手动触发或有更新时发送
        if: steps.check-updates.outputs.has_updates == 'true'
        uses: candies404/Multi-Channel-Notifier@latest
        with:
          title: "${{ steps.check-updates.outputs.title_status }}"
          content: ${{ steps.check-updates.outputs.check_results }}
          wpush_key: ${{ secrets.WPUSH_KEY }}         # WxPusher 的 API key
          hitokoto: 'false'                          # 是否启用一言
